{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../App.svelte",
    "../Component.svelte",
    "../ListeDebit.svelte",
    "../Settings.svelte",
    "../TreeItem.svelte",
    "../InputSelect.svelte",
    "../Etagere.svelte",
    "../Facade.svelte",
    "../Porte.svelte",
    "../Tiroir.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import { version } from '../package.json';\n  import { setContext } from 'svelte';\n  import { readable, writable, get } from 'svelte/store';\n  import { routeDeclare } from './route.js';\n  import Settings from './Settings.svelte';\n  import TreeItem from './TreeItem.svelte';\n  import TreeItemOption from './TreeItemOption.svelte';\n  import Ensemble from './ensembles/Ensemble.svelte';\n  import Porte from './ensembles/Porte.svelte';\n  import Caisson from './ensembles/Caisson.svelte';\n  import Etagere from './ensembles/Etagere.svelte';\n  import Facade from './ensembles/Facade.svelte';\n  import Tiroir from './ensembles/Tiroir.svelte';\n  let components = { Porte, Caisson, Ensemble, Etagere, Facade, Tiroir }\n\n  setContext('App-components',  components)\n\n  let filename = `meuble_${new Date().toISOString().slice(0,16).replace(/T/, '_').replace(/:/, '')}.json`\n  let initdata = {}\n  let data = {}\n\n  $: data = {...initdata}\n\n  $: console.log('App initdata =', initdata)\n  //$: console.log('App data =', data)\n\n  let agencement = 'horizontal'\n\n  let settings = writable(JSON.parse(localStorage.getItem('calcul-meubles-settings') || '{}'))\n  setContext('settings', settings)\n  settings.subscribe(settings => {\n    if(settings.agencement && agencement != settings.agencement) agencement = settings.agencement\n    //console.log(\"App data.settings =\")\n    data.settings = settings\n    localStorage.setItem('calcul-meubles-settings', JSON.stringify(settings))\n  })\n  $: settings.update(settings => ({\n      ...settings,\n      agencement: agencement,\n    }))\n\n  let item = JSON.parse(localStorage.getItem('calcul-meubles-data') || 'null')\n  let fileData = localStorage.getItem('calcul-meubles-file-data')\n  if(item) {\n    initdata = item.data\n    filename = item.filename\n  }\n\n  $: localStorage.setItem('calcul-meubles-data', JSON.stringify({data: data, filename: filename}))\n  $: localStorage.setItem('calcul-meubles-file-data', fileData)\n\n  function clear(){\n    if(!isSaved()) {\n      if(!confirm(\"Fichier non enregistré, voulez-vous continuer et perdre les modifications en cours?\")) return\n      localStorage.setItem('calcul-meubles-data-backup', localStorage.getItem('calcul-meubles-data'))\n      localStorage.setItem('calcul-meubles-file-data-backup', localStorage.getItem('calcul-meubles-file-data'))\n    }\n    localStorage.removeItem('calcul-meubles-data')\n    localStorage.removeItem('calcul-meubles-file-data')\n    window.location.reload()\n  }\n\n  function rename(){\n    let new_filename = prompt(\"Nom du fichier\", filename)\n    if (new_filename == null) return false\n    filename = new_filename.replace(/\\.json$/, '') + '.json'\n    return true\n  }\n\n  function saveAs(){\n    save(true)\n  }\n\n  function ensureSaved(){\n    let item = localStorage.getItem('calcul-meubles-data')\n    if (item) {\n      if(save(false) == 'cancelled') return false;\n    }\n    return true;\n  }\n\n  function isSaved(){\n    if(data.children.length == 0) return true;\n    let json = JSON.stringify(data, null, 2)\n    if (json == fileData) return true;\n    console.log(\"isSaved() = false\", json, fileData)\n    return false;\n  }\n\n  function simpleSave(){\n    if(save(false) == 'already-saved') {\n      alert(\"Déjà enregistré\")\n    }\n  }\n\n  function save(saveAs){\n    if(!saveAs && isSaved()){\n      return 'already-saved';\n    }\n    let json = JSON.stringify(data, null, 2)\n\n    if(saveAs && !rename()) return 'cancelled';\n\n    let file = new window.File([json], filename, {\n      type: 'application/json'\n    })\n    let url = URL.createObjectURL(file);\n\n    try {\n      let a = document.createElement('a');\n      a.href = url;\n      a.style.display = 'none';\n      a.setAttribute('download', filename);\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n\n      localStorage.removeItem('calcul-meubles-data')\n      fileData = json\n    } finally {\n      URL.revokeObjectURL(url)\n    }\n  }\n\n  function open(){\n    if(!isSaved()) {\n      alert(\"Fichier non enregistré, veuillez enregistrer le fichier avant d'en ouvrir un nouveau.\")\n      return\n    }\n    let input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file')\n    input.addEventListener('change', (e) => {\n      let file = e.target.files[0];\n      if (!file) return\n\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        initdata = JSON.parse(e.target.result)\n        settings.set(initdata.settings || {})\n        filename = file.name\n        fileData = e.target.result\n      }\n      reader.readAsText(file);\n    }, false)\n\n    document.body.appendChild(input);\n    input.click();\n    document.body.removeChild(input);\n  }\n\n  function moveTree(e){\n    window.location.hash = e.target.value\n  }\n\n  function openSettings(){\n    window.location.hash = '#/settings'\n  }\n\n  let root_target;\n  routeDeclare((route) => {\n    return route.root ? [root_target] : []\n  })\n\n  function onDataChange(e) {\n    //console.log(`App datachange{${Object.keys(e.detail).join()}} = %o`, e.detail);\n    data = e.detail.data\n  }\n</script>\n\n<style>\n  button, select {\n    margin: 0;\n  }\n  .tree button, .tree select {\n    padding: 1px;\n  }\n  .root {\n    display: flex;\n    grid-template-rows: 3rem auto;\n    grid-template-columns: minmax(0, 1fr) auto;\n    grid-template-areas:\n      \"toolbar toolbar\"\n      \"tree main\";\n    flex-flow: row nowrap;\n    height: 100%\n  }\n  .agencement-horizontal.root {\n    display: grid;\n    grid-template-columns: auto;\n    grid-template-areas:\n      \"toolbar\"\n      \"main\";\n  }\n  .root.agencement-vertical .tree {\n    flex: 0 0 auto\n  }\n  .toolbar {\n    padding: 4px;\n    grid-area: toolbar;\n    background-color: var(--light-bg-color);\n    border-bottom: solid 1px var(--border-color);\n  }\n  .open-save-buttons {\n    display: grid;\n    align-content: stretch;\n    grid-template-rows: repeat(2, 50fr);\n    grid-template-columns: repeat(2, auto);\n  }\n  .tree {\n    grid-area: tree;\n    background-color: var(--light-bg-color);\n    border-right: solid 1px var(--border-color);\n    overflow: auto;\n    width: 15rem;\n    resize: horizontal;\n  }\n  .tree :global(ul) {\n    padding-left: 1em;\n  }\n  .tree :global(ul) :global(ul) {\n    /*border-left: solid 1px var(--border-color);*/\n  }\n  .agencement-horizontal .tree {\n    display: none;\n  }\n  .root.agencement-vertical .tree-select {\n    display: none;\n  }\n  .main {\n    flex: 1 1 auto;\n    grid-area: main;\n    overflow: auto;\n    justify-self: stretch;\n  }\n\n  @media print {\n    .root, .main {\n      display: block !important;\n      overflow: visible !important;\n      height: auto;\n    }\n  }\n</style>\n\n<div class=\"root agencement-{agencement}\">\n\n  {#if agencement == 'horizontal'}\n  <div class=\"toolbar\">\n    <select on:change={moveTree} class=\"tree-select\">\n      <option value='#/settings'>Paramètres</option>\n      <TreeItemOption data={data}/>\n    </select>\n    <button on:click={clear}>Effacer</button>\n    <button on:click={simpleSave}>Enregistrer</button>\n    <button on:click={saveAs}>Enregistrer sous...</button>\n    <button on:click={open}>Ouvrir...</button>\n    {filename} <a href=\"@\" on:click|preventDefault={rename}>✎</a>\n    <div style=\"float: right\">\n      <small>(version {version})</small>\n      <label style=\"display: inline\">\n        Agencement :\n        <select bind:value={agencement}>\n          <option value='horizontal'>Horizontal</option>\n          <option value='vertical'>Vertical</option>\n        </select>\n      </label>\n      <button on:click={openSettings}>Paramètres...</button>\n    </div>\n  </div>\n  {/if}\n\n  <div class=\"tree\">\n    {#if agencement == 'vertical'}\n      <div class=\"open-save-buttons\">\n        <select bind:value={agencement}>\n          <option value='horizontal'>Agencement horizontal</option>\n          <option value='vertical'>Agencement vertical</option>\n        </select>\n        <button on:click={openSettings}>Paramètres...</button>\n        <button on:click={simpleSave}>Enregistrer</button>\n        <button on:click={saveAs}>Enregistrer sous...</button>\n        <button on:click={clear}>Nouveau</button>\n        <button on:click={open}>Ouvrir...</button>\n      </div>\n      <p>{filename} <a href=\"@\" on:click|preventDefault={rename}>✎</a></p>\n      <p><small>(version {version})</small></p>\n    {/if}\n    <ul>\n      <li>\n        <TreeItem data={data}/>\n      </li>\n      {#if agencement == 'vertical'}\n        <li><a href=\"@\" on:click|preventDefault={openSettings}>Paramètres...</a></li>\n      {/if}\n    </ul>\n  </div>\n\n  <div class=\"main\">\n    <Ensemble name=\"Meuble\" initdata={initdata} on:datachange={onDataChange} />\n    <div class=\"routable\" bind:this={root_target}>\n      <details>\n        <summary>Contenu du fichier</summary>\n        <pre id=\"json\">{JSON.stringify(data, null, 2)}</pre>\n      </details>\n    </div>\n    <Settings bind:settings={settings} />\n  </div>\n</div>\n",
    "<script>\n/*\ndata flow:\n\n- root component pass data to child initdata\n- in child:  data = {...initdata, opt, ui, children}\n- child comp pass data to Component\n- when child data changes, Component fires datachange to root\n- child Component pass data.children[i] to grandchild initdata\n- when data changes in grandchild comp, child Component set it to children\n- children is passed from Component to child element\n- child element recomputes data\n- child Component pass updated data to parent\n\n*/\n\n  import { getContext, setContext, createEventDispatcher } from 'svelte';\n  import { routeDeclare } from './route.js';\n  import { nextId } from './utils.js';\n\n  const dispatch = createEventDispatcher();\n  let components = getContext('App-components')\n\n  export let data\n  export let state = {}\n  export let childrenState = []\n  export let children = data.children || []\n  export let path = `${getContext('Component-path')}-${data.id}`\n  export let multi_drawings = false\n\n  /*\n  $: console.log(`Component ${data.type}(${path}) data =`, data)\n  $: console.log(`Component ${data.type}(${path}) state =`, state)\n  $: console.log(`Component ${data.type}(${path}) childrenState =`, childrenState)\n  $: console.log(`Component ${data.type}(${path}) children =`, children)\n  $: console.log(`Component ${data.type}(${path}) path =`, path)\n  */\n\n  setContext('Component-path', path)\n\n  dispatch('datachange', {data, state})\n  //$: dispatch('datachange', {data})\n  //$: dispatch('datachange', {state})\n  //$: console.log(`${data.type}(${path}) datachange!`), dispatch('datachange', {state, data})\n  $: dispatchDatachange(state, data)\n\n  function dispatchDatachange(state, data){\n    //console.log(`${data.type}(${path}) datachange!`)\n    dispatch('datachange', {state, data})\n  }\n\n  function renameChild(i){\n    let name = prompt(`Renommer \"${children[i].name}\" en :`, children[i].name) || children[i].name\n    children[i].name = name\n  }\n\n  function deleteChild(i){\n    if(!confirm(`Supprimer ${children[i].name} (#${i}) ?`)) return\n    let children2 = [...children]\n    children2.splice(i, 1)\n    console.log(\"delete\", i, children, children2)\n    children = children2\n  }\n\n  function onDataChange(e, i){\n    //console.log(`${data.type}(${path}).children[${i}] datachange{${Object.keys(e.detail).join()}} = %o`, e.detail);\n    if(e.detail.data)  children[i] = e.detail.data\n    if(e.detail.state) childrenState[i] = e.detail.state\n  }\n\n  // manually set target class because when svelte modified an element class\n  // list, it removes any manually set classes with the classList API.\n  let target = false\n  routeDeclare(route => {\n    target = (route.component_path == path)\n  })\n\n  function addChild(type){\n    let id = nextId(children)\n    let name = prompt(\"Nom du sous-ensemble :\", `${path}-${id}`) || `${path}-${id}`\n    children = [...children, {\n      type: type,\n      name: name,\n      id:   id\n    }]\n  }\n\n</script>\n\n<style>\n  .debug{\n    display: none;\n  }\n  .component.target, .component:target {\n    height: 100%;\n    display: flex;\n    flex-flow: column nowrap;\n  }\n\n  .component-grid {\n    flex: 1 1 auto;\n    height: 100%;\n    overflow: auto;\n  }\n\n  @media print {\n    .component, .component-grid, .component-grid > * {\n      display: block !important;\n      overflow: visible !important;\n    }\n  }\n</style>\n\n<div class=\"routable component\" class:target={target} id=\"component-{path}\">\n  <div class=\"component-grid\">\n    <div>\n      <button on:click={e => addChild('Porte')}>Nouvelle porte</button>\n      <button on:click={e => addChild('Caisson')}>Nouveau caisson</button>\n      <button on:click={e => addChild('Etagere')}>Nouvelle étagère</button>\n      <button on:click={e => addChild('Plinthe')}>Nouvelle plinthe</button>\n      <button on:click={e => addChild('Facade')}>Nouvelle façade</button>\n      <button on:click={e => addChild('Tiroir')}>Nouveau tiroir</button>\n      <button on:click={e => addChild('Ensemble')}>Nouveau sous-ensemble</button>\n    </div>\n\n    <div class=\"component-grid-plan\">\n      <slot name=\"plan\"></slot>\n    </div>\n    <div class=\"component-grid-dim\">\n      <slot name=\"dim\"></slot>\n    </div>\n    <div class=\"component-grid-main\">\n      <slot></slot>\n    </div>\n    <div class=\"component-grid-tables\">\n      <slot name=\"tables\"></slot>\n    </div>\n\n    <div class=\"component-grid-children\">\n      <slot name=\"children\"></slot>\n\n      {#if data.children && data.children.length}\n      <table>\n      {#each data.children as child, i}\n        {#if child.type}\n        <tr>\n          <td>\n            <a href=\"#/component/{path}-{child.id}\">{child.type} {child.name}</a>\n            <a href=\"@\" on:click|preventDefault={e => renameChild(i)}>✎</a>\n            <a href=\"@\" on:click|preventDefault={e => deleteChild(i)}>🗑</a>\n            {#if (child.source||[]).length > 0}\n              <em>(automatique : {child.source.join(\"-\")})</em>\n            {/if}\n          </td>\n        </tr>\n        {/if}\n      {/each}\n      </table>\n      {/if}\n\n      <button on:click={e => addChild('Porte')}>Nouvelle porte</button>\n      <button on:click={e => addChild('Caisson')}>Nouveau caisson</button>\n      <button on:click={e => addChild('Etagere')}>Nouvelle étagère</button>\n      <button on:click={e => addChild('Plinthe')}>Nouvelle plinthe</button>\n      <button on:click={e => addChild('Facade')}>Nouvelle façade</button>\n      <button on:click={e => addChild('Tiroir')}>Nouveau tiroir</button>\n      <button on:click={e => addChild('Ensemble')}>Nouveau sous-ensemble</button>\n    </div>\n\n    <div class=\"component-grid-debug\">\n      <slot name=\"debug\"></slot>\n    </div>\n  </div>\n  <details>\n    <summary>debug</summary>\n    <pre>{JSON.stringify(data, null, 2)}</pre>\n  </details>\n</div>\n\n\n{#if data.children && data.children.length}\n{#each data.children as child, i (child.id)}\n  <svelte:component\n    this={components[child.type]}\n    initdata={child}\n    on:datachange={e => onDataChange(e, i)}\n    path=\"{path}-{child.id}\" />\n{/each}\n{/if}\n",
    "<script>\n  import { getContext } from 'svelte';\n  import { reduceToObject } from './utils.js';\n  import Group from './pieces/Group.js';\n  import Estimation from './Estimation.svelte'\n\n  export let pieces = []\n  export let merge = true\n  export let estimations\n\n  let separer = true\n  let totaux = true\n  let par_epaiss = false\n  let par_type = true\n\n  function comparePieces(p1, p2) {\n    return (\n      (p1.epaisseur_plateau < p2.epaisseur_plateau) ?  1 :\n      (p1.epaisseur_plateau > p2.epaisseur_plateau) ? -1 :\n      (p1.longueur  < p2.longueur)  ?  1 :\n      (p1.longueur  > p2.longueur)  ? -1 :\n      (p1.largeur   < p2.largeur)   ?  1 :\n      (p1.largeur   > p2.largeur)   ? -1 : 0);\n  }\n\n  // Pièces, tableau non fusionné\n  $: pieces2 = pieces.pieces\n    .reduce((res, p) => res.concat(p.individual()), [])\n    .map((p) => (\n      (!p.piece) ? p : p.piece.update_new({\n        ...p.piece,\n        names: p.nom ? p.nom.split(' ') : p.piece.names,\n        que: quantite * (p.que || p.piece.que || 1),\n      })\n    ))\n    .sort(comparePieces)\n\n  // Pièces, tableau fusionné si merge == true\n  $: pieces3 = !merge ? pieces2 :\n    Object.values(pieces2.reduce((map, p) => (map[p.signature()] = [...(map[p.signature()] || []), p], map), {}))\n    .map(family => (\n      family.reduce((a, b) => (a == null ? b : a.merge(b)), null)\n    ))\n    .sort(comparePieces)\n\n  let cubeprice\n  let cubemargin\n  getContext('settings').subscribe(settings => {\n    cubeprice = settings.cubeprice\n    cubemargin = settings.cubemargin\n  })\n\n  $: total_cube = pieces3.map(p => p.que * p.cubage(cubemargin/100)).reduce((a, b) => (a+b), 0)\n  $: total_prix = pieces3.map(p => p.que * p.prix(cubeprice, cubemargin/100)).reduce((a, b) => (a+b), 0)\n\n  let statistics = []\n  $: statistics = calculStatistics(pieces, totaux)\n  $: statistics_epaisseurs = Object.keys(statistics\n    .reduce((h,x) => {x.epaisseurs.forEach(ep => h[ep.epaisseur] = true); return h}, {}))\n\n  function calculStatistics(total_group, totaux){\n    //console.log(\"calculStatistics!!!!\", total_group.individual().map(p => p.features))\n    return total_group\n      .flat_groups('', totaux)\n      .map(group => {\n        const pieces_par_epaisseur = group.pieces\n          .reduce((h, p) => ({...h, [p.epaisseur]: [...(h[p.epaisseur]||[]), p]}), {})\n        const stats_epaisseur = Object.keys(pieces_par_epaisseur)\n          .map((epaisseur) => ({\n            epaisseur: epaisseur,\n            nb_pieces: pieces_par_epaisseur[epaisseur].length,\n            surface: pieces_par_epaisseur[epaisseur].reduce((s,p) => s + p.surface(), 0)\n          }))\n        const {xmin, xmax, ymin, ymax, zmin, zmax} = group.bounding_box()\n        const panneaux = group.pieces\n          .filter(p => p.features.includes('panneau') || p.features.includes('panneau-seul'))\n        //console.log(group.name, JSON.stringify(group.pieces.map(p => p.features)))\n        return {\n          name:        group.name,\n          dimension_x: xmax - xmin,\n          dimension_y: ymax - ymin,\n          dimension_z: zmax - zmin,\n          nb_tenons:   group.pieces.reduce((n, p) => n + p.nombre_tenons, 0),\n          nb_pieces:   group.pieces.length,\n          surface:     group.surface(),\n          epaisseurs:  stats_epaisseur,\n          nb_panneaux: panneaux.length,\n          m2_panneaux: panneaux.reduce((s,p) => s + p.surface(), 0),\n        }\n      })\n      .filter(stat => stat.nb_pieces > 0)\n  }\n\n  function save(){\n    let lines = [\n      [ \"Pièce\", separer ? \"Num\" : \"Qué\", \"long\", \"larg\", \"ep\",\n        \"Arrasement\", \"Surface (m²)\", \"epaisseur plateau\",\n        `Cubage (sans marge)`,\n        `Cubage (avec marge)`,\n        `Prix au m³`\n      ].map(x => `\"${x}\"`).join(','),\n      [ \"\", \"\", \"\", \"\", \"\",\n        \"\", \"\", \"\",\n        \"\",\n        `${cubemargin}%`,\n        cubeprice].map(x => `\"${x}\"`).join(','),\n    ]\n    if(separer) lines.push(\"\")\n    let row = lines.length + 1\n    for(let piece of pieces3) {\n      row = lines.length + 1\n      let data = [\n        piece.longueur, piece.largeur, piece.epaisseur,\n        piece.string_arrasement(),\n        `=C${row}*D${row}/1000000`,\n        piece.epaisseur_plateau,\n        `=${separer ? '' : `B${row}*`}G${row}*H${row}/1000`,\n        `=I${row}*$J$2`,\n        `=J${row}*$K$2`\n      ]\n      if(separer) {\n        var que = 1\n        for(name of piece.name_list) {\n          lines.push([name, que].concat(data).map(x => `\"${x}\"`).join(','))\n          que = `=B${row}+1`\n          row = lines.length + 1\n        }\n        lines.push(\"\")\n      } else {\n        lines.push([\n          piece.name, piece.que || 1,\n        ].concat(data).map(x => `\"${x}\"`).join(','))\n      }\n    }\n    row = lines.length + 1\n    lines.push([\n      \"Total\", \"\", \"\", \"\", \"\", \"\", \"\", \"\",\n      `=SUM(I2:I${row-1})`,\n      `=SUM(J2:J${row-1})`,\n      `=SUM(K2:K${row-1})`\n    ].map(x => `\"${x}\"`).join(','))\n\n    let csv = \"\\uFEFF\" + lines.join(\"\\n\")\n\n    let filename = (prompt(\"Nom du fichier :\", `débit - ${name}`) || \"liste de débit\") + \".csv\"\n\n    let file = new window.File([csv], filename, {\n      type: 'text/csv'\n    })\n    let url = URL.createObjectURL(file);\n\n    try {\n      let a = document.createElement('a');\n      a.href = url;\n      a.style.display = 'none';\n      a.setAttribute('download', filename);\n\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    } finally {\n      URL.revokeObjectURL(url)\n    }\n  }\n\n</script>\n\n<style>\n  input[size='5'] {\n    width: 6em;\n  }\n  input[size='3'] {\n    width: 4em;\n  }\n</style>\n\n<table class=\"large styled\">\n  <caption>Statistiques pour {pieces.name} (afficher <label style=\"display: inline\"><input bind:checked={totaux} type=checkbox /> totaux</label>, <label style=\"display: inline\"><input bind:checked={par_epaiss} type=checkbox /> par épaisseur</label>, <label style=\"display: inline\"><input bind:checked={par_type} type=checkbox /> par type</label>)</caption>\n  <tr>\n    <th rowspan={(par_epaiss||par_type) ? 2 : 1}>Ensemble</th>\n    <th rowspan={(par_epaiss||par_type) ? 2 : 1}>Dimensions</th>\n    <th rowspan={(par_epaiss||par_type) ? 2 : 1}>Nombre de pièces</th>\n    <th rowspan={(par_epaiss||par_type) ? 2 : 1}>Nombre de tenons</th>\n    <th rowspan={(par_epaiss||par_type) ? 2 : 1}>Surface des pièces</th>\n    {#if par_epaiss}\n      {#each statistics_epaisseurs as ep}\n        <th colspan=2>Pièces ép={ep}</th>\n      {/each}\n    {/if}\n    {#if par_type}\n      <th colspan=2>Panneaux</th>\n    {/if}\n  </tr>\n  {#if par_epaiss || par_type}\n  <tr>\n    {#if par_epaiss}\n      {#each statistics_epaisseurs as ep}\n        <th>Nbre</th>\n        <th>m²</th>\n      {/each}\n    {/if}\n    {#if par_type}\n      <th>Nbre</th>\n      <th>m²</th>\n    {/if}\n  </tr>\n  {/if}\n  {#each statistics as stat}\n    <tr>\n      <td>{stat.name}</td>\n      <td>{stat.dimension_x} x {stat.dimension_y} x {stat.dimension_z}</td>\n      <td>{stat.nb_pieces}</td>\n      <td>{stat.nb_tenons}</td>\n      <td>{stat.surface.toFixed(6)}</td>\n      {#if par_epaiss}\n      {#each statistics_epaisseurs as ep}\n        <td>{(stat.epaisseurs.find(e => e.epaisseur == ep)||{}).nb_pieces || 0}</td>\n        <td>{((stat.epaisseurs.find(e => e.epaisseur == ep)||{}).surface || 0).toFixed(6)}</td>\n      {/each}\n      {/if}\n      {#if par_type}\n        <td>{stat.nb_panneaux}</td>\n        <td>{stat.m2_panneaux.toFixed(6)}</td>\n      {/if}\n    </tr>\n  {/each}\n</table>\n\n<hr/>\n\n<table class=\"large styled\">\n  <caption>Liste de débit (<a href=\"javascript:void(0)\" on:click={save}>ouvrir dans un tableur</a>)</caption>\n  <tr>\n    <th>Pièce (<label style=\"display: inline\"><input bind:checked={separer} type=checkbox /> séparer</label>)</th>\n    <th>Qué</th>\n    <th>L x l x e</th>\n    <th>Arrasement</th>\n    <th>Surface (m²)</th>\n    <th>epaisseur plateau (mm)</th>\n    <th>Cubage<br/>(x<input type=number bind:value={cubemargin} size=3 min=100 step=5/>%)</th>\n    <th>Prix au m³<br/><input type=number bind:value={cubeprice} size=5 step=10/></th>\n  </tr>\n  {#each pieces3 as piece}\n  <tr>\n    <td>\n      {#if separer}\n        {#each piece.name_list as name, i}\n          {#if i != 0}<br/>{/if}\n          {name}\n        {/each}\n      {:else}\n        {piece.name}\n      {/if}\n    </td>\n    <td>{piece.que || 1}</td>\n    <td>{piece.string_dimentions()}</td>\n    <td>{piece.string_arrasement()}</td>\n    <td>{piece.largeur * piece.longueur / 1e6}</td>\n    <td>{piece.epaisseur_plateau}</td>\n    <td>{piece.que * piece.cubage(cubemargin/100).toFixed(9)}</td>\n    <td>{piece.que * piece.prix(cubeprice, cubemargin/100).toFixed(2)}</td>\n  </tr>\n  {/each}\n  <tr>\n    <td>Total</td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td></td>\n    <td>{total_cube.toFixed(9)}</td>\n    <td>{total_prix.toFixed(2)}</td>\n  </tr>\n</table>\n\n<hr/>\n\n<Estimation pieces={pieces} bind:estimations={estimations} />\n\n",
    "<script>\n  import { version } from '../package.json';\n  import { getContext } from 'svelte';\n  import { get } from 'svelte/store';\n  import { cleanObject, reduceToObject } from './utils.js';\n  import { routeDeclare } from './route.js';\n  import InputNumber from './controls/InputNumber.svelte';\n  import InputSelect from './controls/InputSelect.svelte';\n  import InputDurationMin from './controls/InputDurationMin.svelte';\n  import InputCheckbox from './controls/InputCheckbox.svelte';\n\n  export let settings;\n  export let settings_opened = false\n\n  let componentNames = Object.keys(getContext('App-components'))\n\n  let def = {\n    cubeprice: 1440,\n    cubemargin: 135,\n    porte_type: 'contre-profil',\n    postes_estimations: [],\n  }\n\n  let ui = {}\n  settings.subscribe(settings => {\n    ui = settings\n  })\n\n  $: ui = {\n    postes_estimations: [],\n    ...ui\n  }\n\n  let merged = {}\n  $: merged = {\n    ...def,\n    ...cleanObject(ui),\n  }\n  $: settings.set(merged)\n\n  let root_element;\n  routeDeclare((route) => {\n    settings_opened = route.settings\n    return route.settings ? [root_element] : []\n  })\n\n  function addEstim(){\n    let estimName = prompt(\"Quel nom donner à l'estimation :\")\n    if(estimName) ui.postes_estimations = [...ui.postes_estimations, {\n      name: estimName,\n      value: 0,\n      indice: 'constant',\n      components: componentNames.reduce((h,c) => (h[c]=true, h), {}),\n    }]\n    console.log(ui.postes_estimations)\n  }\n\n  function removeEstim(idx){\n    ui.postes_estimations.splice(idx, 1)\n    ui.postes_estimations = ui.postes_estimations\n  }\n\n  function renameEstim(idx){\n    let poste = ui.postes_estimations[idx]\n    let newName = prompt(`Renommer la phase \"${poste.name}\" en :`, poste.name)\n    if(!newName) return;\n    ui.postes_estimations[idx].name = newName\n  }\n\n  function availableComp(ui, idx) {\n    return componentNames.filter(c => ui.postes_estimations[idx].components[c])\n  }\n\n  function open(){\n    let input = document.createElement('input');\n    input.style.display = 'none';\n    input.setAttribute('type', 'file')\n    input.addEventListener('change', (e) => {\n      let file = e.target.files[0];\n      if (!file) return\n\n      let reader = new FileReader();\n      reader.onload = (e) => {\n        let data = JSON.parse(e.target.result)\n        if(data.settings) settings.set(data.settings)\n      }\n      reader.readAsText(file);\n    }, false)\n\n    document.body.appendChild(input);\n    input.click();\n    document.body.removeChild(input);\n  }\n</script>\n\n<style>\n  .estim label {\n    display: inline\n  }\n</style>\n\n<div class=\"routable\" bind:this={root_element}>\n  <button on:click={(e) => window.location.hash = '#/'}>Fermer</button>\n  <p><small>(version {version})</small></p>\n  <hr/>\n  <label>\n    <span>Type de porte : </span>\n    <InputSelect def={def.porte_type} bind:value={ui.porte_type}>\n      <option value=\"tenon-mortaise\">tenon et mortaise</option>\n      <option value=\"contre-profil\">contre profil</option>\n      <option value=\"onglet\">coupe d'onglet</option>\n    </InputSelect>\n  </label>\n  <hr/>\n\n  <label><span>Prix du bois : </span><InputNumber bind:value={ui.cubeprice} def={def.cubeprice} min=0/> €</label>\n  <label><span>Marge de cubage : </span><InputNumber bind:value={ui.cubemargin} def={def.cubemargin} min=0/> %</label>\n\n  <h2>Postes</h2>\n  <table class=\"estim\">\n    <tr>\n      <th>Nom</th>\n      <th>Temps (min)</th>\n      <th>Indice</th>\n      <th>&nbsp;</th>\n      {#each componentNames as comp}\n        <th>{comp}</th>\n      {/each}\n    </tr>\n    {#each merged.postes_estimations as estim, idx}\n      <tr>\n        <td>{estim.name} :</td>\n        <td><InputDurationMin bind:value={ui.postes_estimations[idx].value} /></td>\n        <td>\n          <select bind:value={ui.postes_estimations[idx].indice}>\n            <option value=\"\">(désactivé)</option>\n            <optgroup label=\"par opération...\">\n              <option value=\"constant\">une fois pour toutes</option>\n              <option value=\"per_component\">par élément ({availableComp(ui, idx).join(', ')})</option>\n              <option value=\"per_ferrage_charniere\">par ferrage de charnières</option>\n              <option value=\"tenon\">par tenon</option>\n            </optgroup>\n            <optgroup label=\"par type de pièce...\">\n              <option value=\"m2_trav_mont_cp\">par m² de montants ou traverses à contre-profil</option>\n              <option value=\"m2_trav_mont_ncp\">par m² de montants ou traverses (sauf contre-profil)</option>\n              <option value=\"m2_trav_mont\">par m² de montants ou traverses (tous)</option>\n              <option value=\"m2_panneau\">par m² de panneaux montés en rainure</option>\n              <option value=\"m2_panneau_seul\">par m² de panneaux libres</option>\n              <option value=\"m2_panneau_tous\">par m² de panneaux (tous)</option>\n              <option value=\"m2_cote\">par m² de côtés de tiroir</option>\n              <option value=\"m2_plateau\">par m² (toutes pièces)</option>\n              <option value=\"nb_trav_mont_cp\">par nombre de montants ou traverses à contre-profil</option>\n              <option value=\"nb_trav_mont_ncp\">par nombre de montants ou traverses (sauf contre-profil)</option>\n              <option value=\"nb_trav_mont\">par nombre de montants ou traverses (tous)</option>\n              <option value=\"nb_panneau\">par nombre de panneaux montés en rainure</option>\n              <option value=\"nb_panneau_seul\">par nombre de panneaux libres</option>\n              <option value=\"nb_panneau_tous\">par nombre de panneaux (tous)</option>\n              <option value=\"nb_cote\">par nombre de côtés de tiroir</option>\n              <option value=\"nb_plateau\">par nombre total de pièces</option>\n            </optgroup>\n            <optgroup label=\"par épaisseur...\">\n              <option value=\"m2_ep0_20\">par m² de panneau (ep ⩽ 20)</option>\n              <option value=\"m2_ep20_plus\">par m² de pièces (ep &gt; 20)</option>\n              <option value=\"nb_ep0_20\">par panneau (ep ⩽ 20)</option>\n              <option value=\"nb_ep20_plus\">par nombre de pièces (ep &gt; 20)</option>\n            </optgroup>\n          </select>\n        </td>\n        <td>\n          <button on:click={e => removeEstim(idx)}>🗑</button>\n          <button on:click={e => renameEstim(idx)}>✎</button>\n        </td>\n        {#each componentNames as comp}\n          <td>\n            <label>\n              <InputCheckbox bind:checked={ui.postes_estimations[idx].components[comp]} title={comp}/>\n              {comp.substr(0,2)}\n            </label>\n          </td>\n        {/each}\n      </tr>\n    {/each}\n    <li><button on:click={e => addEstim()}>Ajouter un poste</button></li>\n  </table>\n\n  <hr/>\n  <button on:click={(e) => window.location.hash = '#/'}>Fermer</button>\n  <button on:click={open}>Ouvrir...</button>\n  <details>\n    <summary>Contenu des préférences</summary>\n    <pre>{JSON.stringify(merged, null, 2)}</pre>\n  </details>\n</div>\n",
    "<script>\n  import { routeInfo } from './route.js';\n\n  export let data = {};\n  export let path = '0';\n\n  let selected = false\n\n  function onHashChange(){\n    const route = routeInfo(window.location.hash)\n    selected = (route.component_selector === `#component-${path}`)\n  }\n\n  window.addEventListener(\"hashchange\", onHashChange, false);\n  window.addEventListener(\"load\", onHashChange, false);\n</script>\n\n<style>\n  .selected {\n    font-weight: bold;\n  }\n</style>\n\n<a href=\"#/component/{path}\" class:selected={selected}>{data.type} {data.name}</a>\n{#if data.children}\n<ul>\n  {#each data.children as child}\n  {#if child.type}\n  <li>\n    <svelte:self path=\"{path}-{child.id}\" data={child} />\n  </li>\n  {/if}\n  {/each}\n</ul>\n{/if}\n",
    "<script>\n\n  export let value = null\n  export let def = null\n  export let force = false\n  export let init = null\n\n  if(init != null && value == null) value = init\n\n  let defname = def\n  let select\n  let default_value_id =  Math.random().toString(36).substring(2) +\n                          Math.random().toString(36).substring(2) +\n                          Math.random().toString(36).substring(2)\n\n  let inner_val = (def != null && value == null) ? default_value_id : value\n  $: value = (def != null && inner_val == default_value_id) ? null : inner_val\n\n  $: findDefName(select)\n  function findDefName(select){\n    if(!select) return\n    let option = Array.from(select.options).find(op => op.value == def)\n    if(option) defname = option.textContent\n  }\n\n  $: error = force && value != null && value != def\n\n</script>\n<style>\n  select.error {\n    box-shadow: 0 0 1.5px 1px red;\n  }\n</style>\n\n<select bind:value={inner_val} bind:this={select} class:error={error}>\n  {#if def != null}\n  <option value=\"{default_value_id}\">{defname} (par défaut)</option>\n  {/if}\n  <slot></slot>\n</select>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { cleanObject } from '../utils.js';\n  import InputNumber from '../controls/InputNumber.svelte';\n  import InputCheckbox from '../controls/InputCheckbox.svelte';\n  import Component from '../Component.svelte';\n  import Cote from '../draw/Cote.svelte';\n  import Piece from '../pieces/piece.js';\n  import Group from '../pieces/Group.js';\n  import SVGPiece from '../pieces/SVGPiece.svelte';\n  import SVGDrawing from '../pieces/SVGDrawing.svelte';\n  import ListeDebit from '../ListeDebit.svelte'\n\n  export let path\n  export let initdata = {}\n\n  let data = {...initdata}\n\n  let defaults = {\n    largeur: 400,\n    profondeur: 300,\n    epaisseur: 17,\n    ...initdata.defaults\n  }\n\n  let opt = { ...initdata.opt }\n  let ui  = { ...(initdata.ui || initdata.opt) }\n  let state = {}\n\n  $: opt      = {...defaults, ...cleanObject(ui)}\n  $: data.opt = opt\n  $: data.ui  = ui\n\n  let zoom = 0.5\n\n  $: etagere = new Piece()\n    .add_name(\"Étagère\")\n    .build(opt.largeur, opt.profondeur, opt.epaisseur)\n    .put(0, 0, 0, 'xzy')\n    .add_features('panneau-seul')\n\n  $: pieces = [etagere]\n\n  $: state.pieces = pieces\n</script>\n\n<style>\n  form > * {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    max-width: 30em;\n  }\n  form > * > *:first-child {\n    flex-grow: 1;\n  }\n  hr.clear {\n    clear: both;\n    border: none;\n  }\n  table {\n    clear: both;\n  }\n</style>\n\n<Component bind:data={data} path={path} state={state} on:datachange>\n  <div slot=\"plan\">\n    <SVGDrawing pieces={pieces} name={`Étagère ${data.name}`} />\n  </div>\n\n  <div class=\"main\" slot=\"dim\">\n    <form>\n    <label><span>Longueur   : </span><InputNumber min=0 bind:value={ui.largeur} def={defaults.largeur} force={defaults.force_largeur}/> mm</label>\n    <label><span>Profondeur : </span><InputNumber min=0 bind:value={ui.profondeur} def={defaults.profondeur} force={defaults.force_profondeur}/> mm</label>\n    <label><span>Épaisseur  : </span><InputNumber min=0 bind:value={ui.epaisseur} def={defaults.epaisseur} force={defaults.force_epaisseur}/> mm</label>\n  </div>\n\n  <div slot=\"tables\">\n    <ListeDebit pieces={new Group(pieces, `Étagère ${data.name}`, 'Etagere')} />\n  </div>\n</Component>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { cleanObject } from '../utils.js';\n  import InputNumber from '../controls/InputNumber.svelte';\n  import InputCheckbox from '../controls/InputCheckbox.svelte';\n  import Component from '../Component.svelte';\n  import Cote from '../draw/Cote.svelte';\n  import Piece from '../pieces/piece.js';\n  import Group from '../pieces/Group.js';\n  import SVGPiece from '../pieces/SVGPiece.svelte';\n  import SVGDrawing from '../pieces/SVGDrawing.svelte';\n  import ListeDebit from '../ListeDebit.svelte'\n\n  export let path\n  export let initdata = {}\n\n  let data = {...initdata}\n  let state = {}\n\n  let defaults = {\n    largeur: 400,\n    hauteur: 150,\n    epaisseur: 22,\n    ...initdata.defaults\n  }\n\n  let opt = { ...initdata.opt }\n  let ui  = { ...(initdata.ui || initdata.opt) }\n\n  $: opt      = {...defaults, ...cleanObject(ui)}\n  $: data.opt = opt\n  $: data.ui  = ui\n\n  let zoom = 0.5\n\n  $: facade = new Piece()\n    .add_name(\"Façade\")\n    .build(opt.largeur, opt.hauteur, opt.epaisseur)\n    .put(0, 0, 0, 'xyz')\n    .add_features('panneau-seul')\n\n  $: pieces = [facade]\n\n  $: state.pieces = pieces\n</script>\n\n<style>\n  form > * {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    max-width: 30em;\n  }\n  form > * > *:first-child {\n    flex-grow: 1;\n  }\n  hr.clear {\n    clear: both;\n    border: none;\n  }\n  table {\n    clear: both;\n  }\n</style>\n\n<Component bind:data={data} path={path} state={state} on:datachange>\n  <div slot=\"plan\">\n    <SVGDrawing pieces={pieces} name={`Façade ${data.name}`} />\n  </div>\n\n  <div class=\"main\" slot=\"dim\">\n    <form>\n    <label><span>Largeur    : </span><InputNumber min=0 bind:value={ui.largeur} def={defaults.largeur} force={defaults.force_largeur}/> mm</label>\n    <label><span>Hauteur    : </span><InputNumber min=0 bind:value={ui.hauteur} def={defaults.hauteur} force={defaults.force_hauteur}/> mm</label>\n    <label><span>Épaisseur  : </span><InputNumber min=0 bind:value={ui.epaisseur} def={defaults.epaisseur} force={defaults.force_epaisseur}/> mm</label>\n  </div>\n\n  <div slot=\"tables\">\n    <ListeDebit pieces={new Group(pieces, `Façade ${data.name}`, 'Facade')} />\n  </div>\n</Component>\n",
    "<script>\n  import { onMount, getContext } from 'svelte';\n  import { cleanObject, pipeline } from '../utils.js';\n  import InputNumber from '../controls/InputNumber.svelte';\n  import InputCheckbox from '../controls/InputCheckbox.svelte';\n  import InputSelect from '../controls/InputSelect.svelte';\n  import Component from '../Component.svelte';\n  import Cote from '../draw/Cote.svelte';\n  import Piece from '../pieces/piece.js';\n  import Group from '../pieces/Group.js';\n  import SVGPiece from '../pieces/SVGPiece.svelte';\n  import SVGDrawing from '../pieces/SVGDrawing.svelte';\n  import ListeDebit from '../ListeDebit.svelte'\n\n  export let path\n  export let initdata = {}\n\n  let settings\n  getContext('settings').subscribe(data => { settings = data })\n\n  let data = {...initdata}\n\n  let defaults = {\n    quantite: 1,\n    type:  'contre-profil',\n    largeur: 400,\n    hauteur: 600,\n    epaisseur: 22,\n    largeur_montants: 70,\n    largeur_traverses: 70,\n    profondeur_tenons: 30,\n    profondeur_rainure: 10,\n    profondeur_profil: 15,\n    encastree: false,\n    jeu_encastrement: 2,\n    jeu_rainure: 1,\n    epaisseur_panneau: 16,\n    inclure_panneau: true,\n    ferrage: 'charnieres',\n    ...initdata.defaults\n  }\n\n  let opt = { ...initdata.opt }\n  let ui  = { ...(initdata.ui || initdata.opt) }\n\n  $: opt = pipeline(\n    {\n      ...defaults,\n      ...cleanObject({\n        type: settings.porte_type\n      }),\n      ...cleanObject(ui)\n    },\n    opt => ({\n      largeur_traverse_h: opt.largeur_traverses,\n      largeur_traverse_b: opt.largeur_traverses,\n      ...opt\n    }))\n\n  $: data.opt = opt\n  $: data.ui  = ui\n  let state = {}\n\n  let zoom = 0.25\n\n  $: jeu_encastrement = opt.encastree ? opt.jeu_encastrement : 0\n\n  $: montant = new Piece()\n    .add_name(\"Montant\")\n    .add_features(opt.type == 'contre-profil' ? 'montant-cp' : 'montant')\n    .build(opt.hauteur - 2*jeu_encastrement, opt.largeur_montants, opt.epaisseur)\n  $: montant_g = montant\n    .add_name(\"gauche\")\n    .put(jeu_encastrement, jeu_encastrement, 0, 'yxz')\n  $: montant_d = montant\n    .add_name(\"droit\")\n    .put(jeu_encastrement + opt.largeur - opt.largeur_montants, jeu_encastrement, 0, 'yxz')\n\n  $: traverse =\n    (opt.type == 'contre-profil')  ? new Piece()\n      .add_name(\"Traverse\")\n      .add_features('traverse-cp')\n      .build(\n        opt.largeur - 2 * (opt.largeur_montants - opt.profondeur_profil) - 2*jeu_encastrement,\n        0,\n        opt.epaisseur):\n    (opt.type == 'tenon-mortaise') ? new Piece()\n      .add_name(\"Traverse\")\n      .add_features('traverse')\n      .build(\n        opt.largeur - 2 * opt.largeur_montants - 2*jeu_encastrement,\n        0,\n        opt.epaisseur)\n      .ajout_tenons(opt.profondeur_tenons):\n    (opt.type == 'onglet') ? new Piece()\n      .add_name(\"Traverse\")\n      .add_features('traverse')\n      .build(opt.largeur, 0, opt.epaisseur):\n    new Piece();\n  $: traverse_xpos =\n    (opt.type == 'contre-profil')  ? opt.largeur_montants - opt.profondeur_profil:\n    (opt.type == 'tenon-mortaise') ? opt.largeur_montants - opt.profondeur_tenons:\n    (opt.type == 'onglet')         ? 0:\n    0;\n  $: traverse_h = traverse\n    .add_name(\"haut\")\n    .build(null, opt.largeur_traverse_h)\n    .put(jeu_encastrement + traverse_xpos, jeu_encastrement + opt.hauteur-opt.largeur_traverse_h, 0, 'xyz')\n  $: traverse_b = traverse\n    .add_name(\"bas\")\n    .build(null, opt.largeur_traverse_b)\n    .put(jeu_encastrement + traverse_xpos, jeu_encastrement, 0, 'xyz')\n  $: panneau = (\n    (opt.type == 'contre-profil')  ? new Piece()\n      .build(\n        opt.largeur - 2 * (opt.largeur_montants - opt.profondeur_rainure + opt.jeu_rainure) - 2*jeu_encastrement,\n        opt.hauteur + 2 * (opt.profondeur_rainure - opt.jeu_rainure)\n          - opt.largeur_traverse_h - opt.largeur_traverse_b\n          - 2*jeu_encastrement,\n        opt.epaisseur_panneau):\n    (opt.type == 'tenon-mortaise') ? new Piece()\n      .build(\n        opt.largeur - 2 * (opt.largeur_montants - opt.profondeur_rainure + opt.jeu_rainure),\n        opt.hauteur + 2 * (opt.profondeur_rainure - opt.jeu_rainure)\n          - opt.largeur_traverse_h - opt.largeur_traverse_b,\n        opt.epaisseur_panneau):\n    (opt.type == 'onglet') ? new Piece()\n      .build(\n        opt.largeur - 2 * (opt.largeur_montants - opt.profondeur_rainure + opt.jeu_rainure),\n        opt.hauteur + 2 * (opt.profondeur_rainure - opt.jeu_rainure)\n          - opt.largeur_traverse_h - opt.largeur_traverse_b,\n        opt.epaisseur_panneau):\n    new Piece())\n    .add_name(\"Panneau\")\n    .add_features('panneau')\n    .put(\n      jeu_encastrement + montant.largeur - opt.profondeur_rainure + opt.jeu_rainure,\n      jeu_encastrement + traverse_b.largeur - opt.profondeur_rainure + opt.jeu_rainure,\n      0,\n      'xyz')\n\n  $: pieces = [\n    opt.inclure_panneau ? panneau : null,\n    traverse_h, traverse_b,\n    montant_g, montant_d,\n  ].filter(x => x != null).map(p => p.multiply_que(opt.quantite))\n\n  $: state.pieces_group = new Group(pieces, `Porte ${data.name}`, 'Porte')\n    .add_features(`ferrage-${opt.ferrage}`)\n\n</script>\n\n<style>\n  form > * {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    max-width: 30em;\n  }\n  form > * > *:first-child {\n    flex-grow: 1;\n  }\n  hr.clear {\n    clear: both;\n    border: none;\n  }\n  table {\n    clear: both;\n  }\n</style>\n\n<Component bind:data={data} state={state} path={path} on:datachange>\n  <div slot=\"plan\">\n    <SVGDrawing pieces={pieces} name={`Porte ${data.name}`} />\n\n    <!--<img src=\"porte.svg\" />-->\n    <p>Zoom : <input type=range bind:value={zoom} min=0 max=1 step=.05> {zoom*100} %</p>\n    <svg\n        width=\"{zoom*opt.largeur + 25}\"\n        height=\"{zoom*opt.hauteur + 65}\">\n      <Cote zoom={zoom} x=20 y=0 dim={[\n          {\n            text: \"largeur: \",\n            start: 0,\n            length: opt.largeur,\n            row: 2,\n          },\n          {\n            text: \"lon. traverse: \",\n            start: traverse_h.x,\n            length: traverse_h.longueur,\n            row: 1,\n          },\n          {\n            start: montant_g.x,\n            length: montant_g.largeur,\n            row: 0,\n          },\n          {\n            start: montant_d.x,\n            length: montant_d.largeur,\n            row: 0,\n          }\n        ]} />\n      <Cote zoom={zoom} x=0 y=60 pos=left dim={[\n          {\n            text: \"hauteur: \",\n            start: 0,\n            length: opt.hauteur,\n            row: 0,\n          }\n        ]} />\n      <g transform=\"translate(20, {60 + zoom*opt.hauteur}) scale({zoom} {zoom})\">\n        {#each pieces as piece}\n          <SVGPiece piece={piece} pos=\"avant\" />\n        {/each}\n      </g>\n    </svg>\n  </div>\n\n  <div class=\"main\" slot=\"dim\">\n    <form>\n    <!-- buggy\n    <label><span>Quantité : </span><InputNumber min=1 bind:value={ui.quantite} def={defaults.quantite}/></label>\n    -->\n    <label>\n      <span>Ferrage : </span>\n      <InputSelect def={defaults.ferrage} bind:value={ui.ferrage} force={defaults.force_ferrage}>\n        <option value=\"aucun\">aucun</option>\n        <option value=\"charnieres\">charnières</option>\n      </InputSelect>\n    </label>\n    <label>\n      <span>Type : </span>\n      <InputSelect def={defaults.type} bind:value={ui.type}>\n        <option value=\"tenon-mortaise\">tenon et mortaise</option>\n        <option value=\"contre-profil\">contre profil</option>\n        <option value=\"onglet\">coupe d'onglet</option>\n      </InputSelect>\n    </label>\n    <label><span>Largeur   : </span><InputNumber min=0 bind:value={ui.largeur} def={defaults.largeur} force={defaults.force_largeur}/> mm</label>\n    <label><span>Hauteur   : </span><InputNumber min=0 bind:value={ui.hauteur} def={defaults.hauteur} force={defaults.force_hauteur}/> mm</label>\n    <label><span>Épaisseur : </span><InputNumber min=0 bind:value={ui.epaisseur} def={defaults.epaisseur} force={defaults.force_epaisseur}/> mm</label>\n    <hr/>\n    <label><span>Largeur montants : </span><InputNumber min=0 bind:value={ui.largeur_montants} def={defaults.largeur_montants}/> mm</label>\n    <label><span>largeur traverses : </span><InputNumber min=0 bind:value={ui.largeur_traverses} def={defaults.largeur_traverses}/> mm</label>\n    <label><span>largeur traverse haut : </span><InputNumber min=0 bind:value={ui.largeur_traverse_h} def={opt.largeur_traverses}/> mm</label>\n    <label><span>largeur traverse bas : </span><InputNumber min=0 bind:value={ui.largeur_traverse_b} def={opt.largeur_traverses}/> mm</label>\n    <hr/>\n    <label><span>Épaisseur panneau : </span><InputNumber min=0 bind:value={ui.epaisseur_panneau} def={defaults.epaisseur_panneau}/> mm</label>\n    <label><span>Profondeur rainures : </span><InputNumber min=0 bind:value={ui.profondeur_rainure} def={defaults.profondeur_rainure}/> mm</label>\n    <label><span>Jeu paneau / rainure : </span><InputNumber min=0 bind:value={ui.jeu_rainure} def={defaults.jeu_rainure}/> mm</label>\n    {#if opt.type == 'tenon-mortaise' }\n    <label><span>Profondeur tenons : </span><InputNumber min=0 bind:value={ui.profondeur_tenons} def={defaults.profondeur_tenons}/> mm</label>\n    {:else if opt.type == 'contre-profil' }\n    <label><span>Profondeur profil : </span><InputNumber min=0 bind:value={ui.profondeur_profil} def={defaults.profondeur_profil}/> mm</label>\n    {/if}\n    <label><span>Inclure le paneau</span><InputCheckbox bind:checked={ui.inclure_panneau} def={defaults.inclure_panneau} /></label>\n    <hr/>\n    <label><span>Encastrée</span><InputCheckbox bind:checked={ui.encastree} def={defaults.encastree} /></label>\n    <label><span>jeu encastrement (tout autour) : </span><InputNumber min=0 bind:value={ui.jeu_encastrement} def={defaults.jeu_encastrement}/> mm</label>\n    </form>\n  </div>\n\n  <div slot=\"tables\">\n    <ListeDebit pieces={state.pieces_group} />\n  </div>\n</Component>\n",
    "<script>\n  import { onMount } from 'svelte';\n  import { cleanObject, pipeline } from '../utils.js';\n  import InputNumber from '../controls/InputNumber.svelte';\n  import InputCheckbox from '../controls/InputCheckbox.svelte';\n  import Component from '../Component.svelte';\n  import Cote from '../draw/Cote.svelte';\n  import Piece from '../pieces/piece.js';\n  import Group from '../pieces/Group.js';\n  import SVGPiece from '../pieces/SVGPiece.svelte';\n  import SVGDrawing from '../pieces/SVGDrawing.svelte';\n  import ListeDebit from '../ListeDebit.svelte'\n\n  export let path\n  export let initdata = {}\n\n  let data = {...initdata}\n\n  let defaults = {\n    quantite: 1,\n    largeur: 400,\n    hauteur: 150,\n    hauteur_tir_max: 150,\n    profondeur: 500,\n    epaisseur: 15,\n    profondeur_rainure: 9,\n    profondeur_queues_arrondes: 10,\n    jeu_rainure: 1,\n    jeu_lateral: 6,\n    jeu_dessous: 28,\n    jeu_dessus: 7,\n    epaisseur_fond: 9,\n    inclure_fond: true,\n    ...initdata.defaults\n  }\n\n  let opt = { ...initdata.opt }\n  let ui  = { ...(initdata.ui || initdata.opt) }\n  let tir = {}\n\n  $: tir = calculTiroir({\n      ...defaults,\n      ...cleanObject(ui)\n    })\n\n  $: opt = {\n      ...defaults,\n      ...tir,\n      ...cleanObject(ui),\n    }\n\n  $: data.opt = opt\n  $: data.ui  = ui\n  let state = {}\n\n  $: cote = new Piece()\n    .add_name(\"Coté\")\n    .add_features('cote')\n    .build(\n      opt.profondeur_tir - 2 * (opt.epaisseur - opt.profondeur_queues_arrondes),\n      opt.hauteur_tir,\n      opt.epaisseur)\n  $: cote_g = cote\n    .add_name(\"gauche\")\n    .put(\n      opt.jeu_lateral,\n      opt.jeu_dessous,\n      opt.epaisseur - opt.profondeur_queues_arrondes,\n      'zyx')\n  $: cote_d = cote\n    .add_name(\"droit\")\n    .put(\n      opt.jeu_lateral + opt.largeur_tir - opt.epaisseur,\n      opt.jeu_dessous,\n      opt.epaisseur - opt.profondeur_queues_arrondes,\n      'zyx')\n\n  $: face = new Piece()\n    .add_name(\"Face\")\n    .add_features('cote')\n    .build(opt.largeur_tir, opt.hauteur_tir, opt.epaisseur);\n  $: face_av = face\n    .add_name(\"avant\")\n    .put(\n      opt.jeu_lateral,\n      opt.jeu_dessous,\n      0,\n      'xyz')\n  $: face_ar = face\n    .add_name(\"arrière\")\n    .put(\n      opt.jeu_lateral,\n      opt.jeu_dessous,\n      opt.profondeur_tir - opt.epaisseur,\n      'xyz')\n\n  $: fond = new Piece()\n    .add_name(\"Fond tiroir\")\n    .add_features('panneau')\n    .build(\n      opt.largeur_tir - 2 * (opt.epaisseur - opt.profondeur_rainure + opt.jeu_rainure),\n      opt.profondeur_tir - (opt.epaisseur - opt.profondeur_rainure + opt.jeu_rainure),\n      opt.epaisseur_fond)\n    .put(\n      opt.jeu_lateral + opt.epaisseur - opt.profondeur_rainure + opt.jeu_rainure,\n      opt.jeu_dessous,\n      opt.epaisseur - opt.profondeur_rainure + opt.jeu_rainure,\n      'xzy')\n\n  $: pieces = [\n    opt.inclure_fond ? fond : null,\n    face_av, face_ar,\n    cote_g, cote_d,\n  ].filter(x => x != null).map(p => p.multiply_que(opt.quantite))\n\n  $: pieces_group = new Group(pieces, `Tiroir ${data.name}`, 'Tiroir')\n  $: state.pieces_group = pieces_group\n\n  function calculTiroir(opt){\n    let largeur_tir = opt.largeur - 2 * opt.jeu_lateral\n    let profondeur_tir = opt.profondeur - (opt.profondeur % 50)\n    let hauteur_tir = Math.min(opt.hauteur_tir_max, opt.hauteur - opt.jeu_dessous - opt.jeu_dessus)\n    return {largeur_tir, profondeur_tir, hauteur_tir}\n  }\n\n</script>\n\n<style>\n  form > * {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: nowrap;\n    max-width: 30em;\n  }\n  form > * > *:first-child {\n    flex-grow: 1;\n  }\n</style>\n\n<Component bind:data={data} state={state} path={path} on:datachange>\n  <div slot=\"plan\">\n    <SVGDrawing pieces={pieces_group} />\n  </div>\n\n  <div class=\"main\" slot=\"dim\">\n    <form>\n    <label><span>Quantité : </span><InputNumber min=1 bind:value={ui.quantite} def={defaults.quantite}/></label>\n    <hr/>\n    <label><span>Largeur logement   : </span><InputNumber min=0 bind:value={ui.largeur} def={defaults.largeur} force={defaults.force_largeur}/> mm</label>\n    <label><span>Hauteur logement  : </span><InputNumber min=0 bind:value={ui.hauteur} def={defaults.hauteur} force={defaults.force_hauteur}/> mm</label>\n    <label><span>Profondeur logement : </span><InputNumber min=0 bind:value={ui.profondeur} def={defaults.profondeur} force={defaults.force_profondeur}/> mm</label>\n    <hr/>\n    <label><span>Largeur   : </span><InputNumber min=0 bind:value={ui.largeur_tir} def={tir.largeur_tir}/> mm</label>\n    <label><span>Profondeur : </span><InputNumber min=0 bind:value={ui.profondeur_tir} def={tir.profondeur_tir}/> mm</label>\n    <label><span>Hauteur   : </span><InputNumber min=0 bind:value={ui.hauteur_tir} def={tir.hauteur_tir}/> mm</label>\n    <label><span>Hauteur max : </span><InputNumber min=0 bind:value={ui.hauteur_tir_max} def={defaults.hauteur_tir_max}/> mm</label>\n    <hr/>\n    <label><span>Profondeur queues d'arrondes : </span><InputNumber min=0 bind:value={ui.profondeur_queues_arrondes} def={defaults.profondeur_queues_arrondes}/> mm</label>\n    <label><span>Épaisseur : </span><InputNumber min=0 bind:value={ui.epaisseur} def={defaults.epaisseur} force={defaults.force_epaisseur}/> mm</label>\n    <label><span>Épaisseur fond : </span><InputNumber min=0 bind:value={ui.epaisseur_fond} def={defaults.epaisseur_fond}/> mm</label>\n    <label><span>Profondeur rainures : </span><InputNumber min=0 bind:value={ui.profondeur_rainure} def={defaults.profondeur_rainure}/> mm</label>\n    <label><span>Jeu paneau / rainure : </span><InputNumber min=0 bind:value={ui.jeu_rainure} def={defaults.jeu_rainure}/> mm</label>\n    <label><span>Inclure le fond</span><InputCheckbox bind:checked={ui.inclure_fond} def={defaults.inclure_fond} /></label>\n    </form>\n  </div>\n\n  <div slot=\"tables\">\n    <ListeDebit pieces={pieces_group} />\n  </div>\n</Component>\n"
  ],
  "names": [],
  "mappings": "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"
}